package serviceInterface.autosar.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Client;
  private ConceptPresentation props_ClientRef;
  private ConceptPresentation props_DataElement;
  private ConceptPresentation props_DataElementType;
  private ConceptPresentation props_Event;
  private ConceptPresentation props_Function;
  private ConceptPresentation props_MethodArgRef;
  private ConceptPresentation props_MethodCall;
  private ConceptPresentation props_MethodReturnRef;
  private ConceptPresentation props_PeriodicNotificationEvent;
  private ConceptPresentation props_Service;
  private ConceptPresentation props_ServiceInterface;
  private ConceptPresentation props_ServiceInterfaceType;
  private ConceptPresentation props_ServiceRef;
  private ConceptPresentation props_SporadicEvent;
  private ConceptPresentation props_Struct;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_ufloat32_t;
  private ConceptPresentation props_uint32_t;
  private ConceptPresentation props_uint8_t;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Client:
        if (props_Client == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Client = cpb.create();
        }
        return props_Client;
      case LanguageConceptSwitch.ClientRef:
        if (props_ClientRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x5edcd1c61ac4826L, 0xb1da37adef86448dL, 0x36d24cda9c203d36L, 0x36d24cda9c266f6cL, "use", "", "");
          props_ClientRef = cpb.create();
        }
        return props_ClientRef;
      case LanguageConceptSwitch.DataElement:
        if (props_DataElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataElement = cpb.create();
        }
        return props_DataElement;
      case LanguageConceptSwitch.DataElementType:
        if (props_DataElementType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DataElementType = cpb.create();
        }
        return props_DataElementType;
      case LanguageConceptSwitch.Event:
        if (props_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Event = cpb.create();
        }
        return props_Event;
      case LanguageConceptSwitch.Function:
        if (props_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Function = cpb.create();
        }
        return props_Function;
      case LanguageConceptSwitch.MethodArgRef:
        if (props_MethodArgRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x5edcd1c61ac4826L, 0xb1da37adef86448dL, 0x36d24cda9c267312L, 0x36d24cda9c2673acL, "arguementtarget", "", "");
          props_MethodArgRef = cpb.create();
        }
        return props_MethodArgRef;
      case LanguageConceptSwitch.MethodCall:
        if (props_MethodCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MethodCall = cpb.create();
        }
        return props_MethodCall;
      case LanguageConceptSwitch.MethodReturnRef:
        if (props_MethodReturnRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x5edcd1c61ac4826L, 0xb1da37adef86448dL, 0x36d24cda9c2678afL, 0x36d24cda9c267913L, "returntarget", "", "");
          props_MethodReturnRef = cpb.create();
        }
        return props_MethodReturnRef;
      case LanguageConceptSwitch.PeriodicNotificationEvent:
        if (props_PeriodicNotificationEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PeriodicNotificationEvent = cpb.create();
        }
        return props_PeriodicNotificationEvent;
      case LanguageConceptSwitch.Service:
        if (props_Service == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Service = cpb.create();
        }
        return props_Service;
      case LanguageConceptSwitch.ServiceInterface:
        if (props_ServiceInterface == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ServiceInterface = cpb.create();
        }
        return props_ServiceInterface;
      case LanguageConceptSwitch.ServiceInterfaceType:
        if (props_ServiceInterfaceType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ServiceInterfaceType = cpb.create();
        }
        return props_ServiceInterfaceType;
      case LanguageConceptSwitch.ServiceRef:
        if (props_ServiceRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x5edcd1c61ac4826L, 0xb1da37adef86448dL, 0x36d24cda9c203b9eL, 0x36d24cda9c267006L, "provides", "", "");
          props_ServiceRef = cpb.create();
        }
        return props_ServiceRef;
      case LanguageConceptSwitch.SporadicEvent:
        if (props_SporadicEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SporadicEvent = cpb.create();
        }
        return props_SporadicEvent;
      case LanguageConceptSwitch.Struct:
        if (props_Struct == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Struct = cpb.create();
        }
        return props_Struct;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.ufloat32_t:
        if (props_ufloat32_t == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ufloat32_t = cpb.create();
        }
        return props_ufloat32_t;
      case LanguageConceptSwitch.uint32_t:
        if (props_uint32_t == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_uint32_t = cpb.create();
        }
        return props_uint32_t;
      case LanguageConceptSwitch.uint8_t:
        if (props_uint8_t == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_uint8_t = cpb.create();
        }
        return props_uint8_t;
    }
    return null;
  }
}
